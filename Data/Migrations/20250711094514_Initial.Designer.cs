// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250711094514_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppRoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("app_role_name");

                    b.HasKey("Id")
                        .HasName("pk_app_roles");

                    b.ToTable("app_roles", (string)null);
                });

            modelBuilder.Entity("Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("id");

                    b.Property<int?>("AppRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("app_role_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<byte>("LoginProvider")
                        .HasColumnType("smallint")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_app_users");

                    b.HasIndex("AppRoleId")
                        .HasDatabaseName("ix_app_users_app_role_id");

                    b.ToTable("app_users", (string)null);
                });

            modelBuilder.Entity("Data.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("Data.Models.TenantRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TenantRoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tenant_role_name");

                    b.HasKey("Id")
                        .HasName("pk_tenant_roles");

                    b.ToTable("tenant_roles", (string)null);
                });

            modelBuilder.Entity("Data.Models.TenantUser", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("AppUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("app_user_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("TenantId", "AppUserId")
                        .HasName("pk_tenant_users");

                    b.HasIndex("AppUserId")
                        .HasDatabaseName("ix_tenant_users_app_user_id");

                    b.ToTable("tenant_users", (string)null);
                });

            modelBuilder.Entity("Data.Models.TenantUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("claim_name");

                    b.Property<string>("TenantUserAppUserId")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tenant_user_app_user_id");

                    b.Property<int>("TenantUserId")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("tenant_user_id");

                    b.Property<int>("TenantUserTenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_user_tenant_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_tenant_user_claims");

                    b.HasIndex("ClaimName")
                        .IsUnique()
                        .HasDatabaseName("ix_tenant_user_claims_claim_name");

                    b.HasIndex("TenantUserTenantId", "TenantUserAppUserId")
                        .HasDatabaseName("ix_tenant_user_claims_tenant_user_tenant_id_tenant_user_app_us");

                    b.ToTable("tenant_user_claims", (string)null);
                });

            modelBuilder.Entity("TenantRoleTenantUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer")
                        .HasColumnName("roles_id");

                    b.Property<int>("TenantUsersTenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_users_tenant_id");

                    b.Property<string>("TenantUsersAppUserId")
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tenant_users_app_user_id");

                    b.HasKey("RolesId", "TenantUsersTenantId", "TenantUsersAppUserId")
                        .HasName("pk_tenant_role_tenant_user");

                    b.HasIndex("TenantUsersTenantId", "TenantUsersAppUserId")
                        .HasDatabaseName("ix_tenant_role_tenant_user_tenant_users_tenant_id_tenant_users");

                    b.ToTable("tenant_role_tenant_user", (string)null);
                });

            modelBuilder.Entity("Data.Models.AppUser", b =>
                {
                    b.HasOne("Data.Models.AppRole", null)
                        .WithMany("AppUsers")
                        .HasForeignKey("AppRoleId")
                        .HasConstraintName("fk_app_users_app_roles_app_role_id");
                });

            modelBuilder.Entity("Data.Models.TenantUser", b =>
                {
                    b.HasOne("Data.Models.AppUser", "AppUser")
                        .WithMany("TenantUsers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_users_app_users_app_user_id");

                    b.HasOne("Data.Models.Tenant", "Tenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_users_tenants_tenant_id");

                    b.Navigation("AppUser");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Data.Models.TenantUserClaim", b =>
                {
                    b.HasOne("Data.Models.TenantUser", "TenantUser")
                        .WithMany("Claims")
                        .HasForeignKey("TenantUserTenantId", "TenantUserAppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_user_claims_tenant_users_tenant_user_tenant_id_tenan");

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("TenantRoleTenantUser", b =>
                {
                    b.HasOne("Data.Models.TenantRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_role_tenant_user_tenant_roles_roles_id");

                    b.HasOne("Data.Models.TenantUser", null)
                        .WithMany()
                        .HasForeignKey("TenantUsersTenantId", "TenantUsersAppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_role_tenant_user_tenant_users_tenant_users_tenant_id");
                });

            modelBuilder.Entity("Data.Models.AppRole", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("Data.Models.AppUser", b =>
                {
                    b.Navigation("TenantUsers");
                });

            modelBuilder.Entity("Data.Models.Tenant", b =>
                {
                    b.Navigation("TenantUsers");
                });

            modelBuilder.Entity("Data.Models.TenantUser", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
